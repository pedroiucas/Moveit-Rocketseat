{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\All codes\\\\TypeScript\\\\NLW4-Rocketseat\\\\src\\\\contexts\\\\CountdownContext.tsx\";\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { ChallengesContext } from './ChallengeContext';\nexport const CountdownContext = /*#__PURE__*/createContext({});\nlet CountdownTimeOut;\nexport function CountdownProvider({\n  children\n}) {\n  const {\n    startNewChallenge\n  } = useContext(ChallengesContext);\n  const {\n    0: time,\n    1: setTime\n  } = useState(0.1 * 3600);\n  const {\n    0: isActive,\n    1: setIsActive\n  } = useState(false);\n  const {\n    0: hasFinished,\n    1: setHasFinished\n  } = useState(false);\n  const minutes = Math.floor(time / 60); //Retornará os minutos por inteiro\n\n  const seconds = time % 60;\n\n  function startCountdown() {\n    setIsActive(true);\n  } // o useEffect monitora algo\n\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      CountdownTimeOut = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setHasFinished(true);\n      setIsActive(false);\n      startNewChallenge();\n    }\n  }, [isActive, time]); // Ele monitorará a mudança do active e do time\n\n  function resetCountdown() {\n    // É usado o clear para que o delay de 1 segundo não seja executado e de fato com o click do botão o time parar\n    clearTimeout(CountdownTimeOut);\n    setIsActive(false);\n    setTime(0.1 * 60);\n    setHasFinished(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes,\n      seconds,\n      hasFinished,\n      isActive,\n      resetCountdown,\n      startCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["D:/All codes/TypeScript/NLW4-Rocketseat/src/contexts/CountdownContext.tsx"],"names":["createContext","useContext","useEffect","useState","ChallengesContext","CountdownContext","CountdownTimeOut","CountdownProvider","children","startNewChallenge","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountdown","setTimeout","resetCountdown","clearTimeout"],"mappings":";;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0DC,QAA1D,QAA0E,OAA1E;AACA,SAASC,iBAAT,QAAkC,oBAAlC;AAeA,OAAO,MAAMC,gBAAgB,gBAAGL,aAAa,CAAC,EAAD,CAAtC;AACP,IAAIM,gBAAJ;AAEA,OAAO,SAASC,iBAAT,CAA2B;AAAEC,EAAAA;AAAF,CAA3B,EAAiE;AACtE,QAAM;AAAEC,IAAAA;AAAF,MAAwBR,UAAU,CAACG,iBAAD,CAAxC;AAEA,QAAM;AAAA,OAACM,IAAD;AAAA,OAAOC;AAAP,MAAkBR,QAAQ,CAAC,MAAM,IAAP,CAAhC;AACA,QAAM;AAAA,OAACS,QAAD;AAAA,OAAWC;AAAX,MAA0BV,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACW,WAAD;AAAA,OAAcC;AAAd,MAAgCZ,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMa,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB,CAPsE,CAO/B;;AACvC,QAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB;;AAEA,WAASU,cAAT,GAA0B;AACxBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD,GAZqE,CActE;;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACxBJ,MAAAA,gBAAgB,GAAGe,UAAU,CAAC,MAAM;AAClCV,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,OAF4B,EAE1B,IAF0B,CAA7B;AAGD,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA4B;AACjCK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAJ,MAAAA,iBAAiB;AAClB;AACF,GAVQ,EAUN,CAACG,QAAD,EAAWF,IAAX,CAVM,CAAT,CAfsE,CAyBhD;;AAEtB,WAASY,cAAT,GAA0B;AACxB;AACAC,IAAAA,YAAY,CAACjB,gBAAD,CAAZ;AACAO,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAAC,MAAM,EAAP,CAAP;AACAI,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD;;AAED,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAF;AAAWG,MAAAA,OAAX;AAAoBL,MAAAA,WAApB;AAAiCF,MAAAA,QAAjC;AAA2CU,MAAAA,cAA3C;AAA2DF,MAAAA;AAA3D,KAAlC;AAAA,cACGZ;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useState } from 'react';\r\nimport { ChallengesContext } from './ChallengeContext';\r\n\r\ninterface CountdownContextData {\r\n  minutes: number;\r\n  seconds: number;\r\n  hasFinished: boolean;\r\n  isActive: boolean;\r\n  resetCountdown: () => void;\r\n  startCountdown: () => void;\r\n}\r\n\r\ninterface CountdownProviderProps {\r\n  children: ReactNode\r\n}\r\n\r\nexport const CountdownContext = createContext({} as CountdownContextData);\r\nlet CountdownTimeOut: NodeJS.Timeout;\r\n\r\nexport function CountdownProvider({ children }: CountdownProviderProps) {\r\n  const { startNewChallenge } = useContext(ChallengesContext);\r\n\r\n  const [time, setTime] = useState(0.1 * 3600);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [hasFinished, setHasFinished] = useState(false);\r\n\r\n  const minutes = Math.floor(time / 60); //Retornará os minutos por inteiro\r\n  const seconds = time % 60;\r\n\r\n  function startCountdown() {\r\n    setIsActive(true);\r\n  }\r\n\r\n  // o useEffect monitora algo\r\n  useEffect(() => {\r\n    if (isActive && time > 0) {\r\n      CountdownTimeOut = setTimeout(() => {\r\n        setTime(time - 1)\r\n      }, 1000)\r\n    } else if (isActive && time === 0) {\r\n      setHasFinished(true);\r\n      setIsActive(false);\r\n      startNewChallenge();\r\n    }\r\n  }, [isActive, time]); // Ele monitorará a mudança do active e do time\r\n\r\n  function resetCountdown() {\r\n    // É usado o clear para que o delay de 1 segundo não seja executado e de fato com o click do botão o time parar\r\n    clearTimeout(CountdownTimeOut);\r\n    setIsActive(false);\r\n    setTime(0.1 * 60);\r\n    setHasFinished(false);\r\n  }\r\n\r\n  return (\r\n    <CountdownContext.Provider value={{ minutes, seconds, hasFinished, isActive, resetCountdown, startCountdown }}>\r\n      {children}\r\n    </CountdownContext.Provider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}